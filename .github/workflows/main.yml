name: Deploy to AKS

on:
  push:
    branches:
      - main
  workflow_dispatch:
    
jobs:
  checkoutAndBuildImage:
    runs-on: ubuntu-latest
    permissions:
        contents: read
        id-token: write
    steps:
        - uses: actions/checkout@v4
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
        - name: acr login
          run: az acr login --name ${{ vars.CONTAINER_REGISTRY }} --expose-token
        - name: Build and push aks-scaler image to ACR (${{ vars.CONTAINER_REGISTRY }})
          run: az acr build --image aks-scaler:latest --registry ${{ vars.CONTAINER_REGISTRY }} --file Dockerfile .
        - name: add tag to aks-scaler image
          run: az acr import --name ${{ vars.CONTAINER_REGISTRY }} --source ${{ vars.CONTAINER_REGISTRY }}.azurecr.io/aks-scaler:latest --image aks-scaler:${{ github.sha }} --force

  deployToAKS:
    needs: checkoutAndBuildImage
    runs-on: ubuntu-latest
    permissions:
        contents: read
        id-token: write
    steps:
        - uses: actions/checkout@v4
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
        - name: acr login
          run: az acr login --name ${{ vars.CONTAINER_REGISTRY }} --expose-token

        # Use kubelogin to configure your kubeconfig for Azure auth
        - name: Set up kubelogin for non-interactive login
          uses: azure/use-kubelogin@v1
          with:
            kubelogin-version: 'v0.0.25'

        # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
        - name: Get K8s context
          uses: azure/aks-set-context@v3
          with:
            resource-group: ${{ vars.RESOURCE_GROUP }}
            cluster-name: ${{ vars.CLUSTER_NAME }}
            admin: 'false'
            use-kubelogin: 'true'

        - uses: azure/setup-kubectl@v3
          with:
              version: 'latest' # default is latest stable
          id: install
        - name: create aks-scaler-secret
          run: |
            if kubectl get secret aks-scaler-secret -n ${{ vars.SERVICE_ACCOUNT_NAMESPACE }} >/dev/null 2>&1; then
              echo "Secret aks-scaler-secret already exists"
            else
              kubectl create secret generic aks-scaler-secret \
                --from-literal=tenant='${{ secrets.AZURE_TENANT_ID }}' \
                --from-literal=client-id='${{ secrets.AZURE_CLIENT_ID }}' \
                --from-literal=client-secret='${{ secrets.AZURE_CLIENT_SECRET }}' \
                --from-literal=subscription='${{ secrets.SUBSCRIPTION_ID }}' \
                --namespace=${{ vars.SERVICE_ACCOUNT_NAMESPACE }}
            fi

        - name: create aks-scaler-configmap
          run: |
            if kubectl get configmap aks-scaler-configmap -n ${{ vars.SERVICE_ACCOUNT_NAMESPACE }} >/dev/null 2>&1; then
              echo "ConfigMap aks-scaler-configmap already exists"
            else
              kubectl create configmap aks-scaler-configmap \
                --from-literal=resource-group='${{ vars.RESOURCE_GROUP }}' \
                --from-literal=location='${{ vars.LOCATION }}' \
                --from-literal=cluster-name='${{ vars.CLUSTER_NAME }}' \
                --from-literal=node-pools-amount='${{ vars.NODE_POOLS_AMOUNT }}' \
                --namespace=${{ vars.SERVICE_ACCOUNT_NAMESPACE }}
            fi            

        - name: create azure-wi-webhook-config configmap
          run: |
            if kubectl get configmap azure-wi-webhook-config -n ${{ vars.SERVICE_ACCOUNT_NAMESPACE }} >/dev/null 2>&1; then
              echo "ConfigMap azure-wi-webhook-config already exists"
            else
              kubectl create configmap azure-wi-webhook-config \
                --from-literal=AZURE_TENANT_ID='${{ secrets.AZURE_TENANT_ID }}' \
                --namespace=${{ vars.SERVICE_ACCOUNT_NAMESPACE }}
            fi            
  


        # Deploys application based on given manifest file
        - name: Deploys application
          uses: Azure/k8s-deploy@v4
          with:
            action: deploy
            manifests: ${{ vars.DEPLOYMENT_MANIFEST_PATH }}
            images: |
              ${{ vars.CONTAINER_REGISTRY }}.azurecr.io/${{ vars.CONTAINER_NAME }}:latest
