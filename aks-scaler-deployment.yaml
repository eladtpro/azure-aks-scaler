apiVersion: apps/v1
kind: Deployment
metadata:
  name: aks-scaler-deployment
  namespace: default # HACK: should be replaced in helm values files ${{ vars.SERVICE_ACCOUNT_NAMESPACE }}
  labels:
    azure.workload.identity/use: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: aks-scaler
  template:
    metadata:
      labels:
        app: aks-scaler
    spec:
      serviceAccountName: workload-identity-sa # HACK: should be replaced in helm values files ${{vars.SERVICE_ACCOUNT_NAMESPACE}}
      containers:
        - image: acr4aksregistry.azurecr.io/aks-scaler:latest # HACK: should be replaced in helm values files ${{vars.CONTAINER_REGISTRY}}
          name: oidc
          env:
          - name: AZURE_TENANT_ID
            valueFrom:
              secretKeyRef:
                name: aks-scaler-secret
                key: tenant
          - name: AZURE_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: aks-scaler-secret
                key: client-id
          - name: AZURE_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: aks-scaler-secret
                key: client-secret
          - name: SUBSCRIPTION_ID
            valueFrom:
              secretKeyRef:
                name: aks-scaler-secret
                key: subscription
          - name: NODE_POOLS_AMOUNT
            valueFrom:
              configMapKeyRef:
                name: aks-scaler-configmap
                key: node-pools-amount
          - name: RESOURCE_GROUP
            valueFrom:
              configMapKeyRef:
                name: aks-scaler-configmap
                key: resource-group
          - name: LOCATION
            valueFrom:
              configMapKeyRef:
                name: aks-scaler-configmap
                key: location
          - name: CLUSTER_NAME
            valueFrom:
              configMapKeyRef:
                name: aks-scaler-configmap
                key: cluster-name
      nodeSelector:
        kubernetes.io/os: linux

kind: Service
metadata:
  name: aks-scaler-service
spec:
  type: NodePort
  selector:
    app: aks-scaler
  ports:
  - name: http
    port: 80
    targetPort: 8080

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: aks-scaler-ingress
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /$1
# spec:
#   rules:
#   - host: cluster-url
#     http:
#       paths:
#       - path: /scale(/|$)(.*)
#         pathType: Prefix
#         backend:
#           service:
#             name: aks-scaler-service
#             port:
#               name: http